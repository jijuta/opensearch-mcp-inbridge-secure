#!/usr/bin/env node

const readline = require('readline');
const axios = require('axios');

// MCP_SERVER_URLÏùÄ ÌïÑÏàò ÌôòÍ≤ΩÎ≥ÄÏàò
const MCP_SERVER_URL = process.env.MCP_SERVER_URL;

if (!MCP_SERVER_URL) {
  console.error('‚ùå MCP_SERVER_URL environment variable is required');
  console.error('');
  console.error('Please set the MCP server URL in your Claude Desktop configuration:');
  console.error('{');
  console.error('  "mcpServers": {');
  console.error('    "opensearch": {');
  console.error('      "command": "opensearch-mcp-inbridge",');
  console.error('      "env": {');
  console.error('        "MCP_SERVER_URL": "http://your-server:your-port"');
  console.error('      }');
  console.error('    }');
  console.error('  }');
  console.error('}');
  console.error('');
  console.error('Contact your system administrator for the correct MCP_SERVER_URL value.');
  process.exit(1);
}

// ÏÑ∏ÏÖò Í¥ÄÎ¶¨
let sessionId = null;

// Ìó¨Ïä§Ï≤¥ÌÅ¨
async function healthCheck() {
  try {
    await axios.get(`${MCP_SERVER_URL}/health`, { timeout: 5000 });
    console.error(`‚úÖ MCP Server connected: ${MCP_SERVER_URL}`);
    console.error(`üîß opensearch-mcp-inbridge v1.3.3 - 202 ÏùëÎãµ Ï≤òÎ¶¨ Í∞úÏÑ†, Zod ÏóêÎü¨ ÏàòÏ†ï`);
  } catch (error) {
    console.error(`‚ùå Cannot connect to MCP server: ${MCP_SERVER_URL}`);
    console.error(`Error: ${error.message}`);
    console.error('');
    console.error('Please check:');
    console.error('- Server URL is correct');
    console.error('- MCP server is running');
    console.error('- Network connectivity');
    process.exit(1);
  }
}

// ÏãúÏûë Ïãú Ìó¨Ïä§Ï≤¥ÌÅ¨
healthCheck();

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false
});

rl.on('line', async (line) => {
  let request = null;
  try {
    request = JSON.parse(line);

    // Streamable HTTP ÌîÑÎ°úÌÜ†ÏΩúÏóê ÎßûÍ≤å /mcp/ ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÇ¨Ïö© (trailing slash ÌïÑÏöî)
    const endpoint = `${MCP_SERVER_URL}/mcp/`;
    const headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json, text/event-stream',
      'User-Agent': 'opensearch-mcp-inbridge/1.3.3',
      'Connection': 'keep-alive'
    };

    // ÏÑ∏ÏÖò IDÍ∞Ä ÏûàÏúºÎ©¥ Ìó§ÎçîÏóê Ï∂îÍ∞Ä
    if (sessionId) {
      headers['Mcp-Session-Id'] = sessionId;
    }

    console.error(`üì§ Request to: ${endpoint} | Method: ${request.method} | Session: ${sessionId || 'none'} | v1.3.3`);

    const response = await axios.post(endpoint, request, {
      headers,
      timeout: 60000,
      maxRetries: 0,
      validateStatus: function (status) {
        return status >= 200 && status < 500; // 4xx ÏóêÎü¨ÎèÑ ÌóàÏö©Ìï¥ÏÑú ÎîîÎ≤ÑÍπÖ
      }
    });

    // ÏùëÎãµÏóêÏÑú ÏÑ∏ÏÖò ID Ï∂îÏ∂ú (initialize ÏùëÎãµÏóêÏÑú)
    if (response.headers['mcp-session-id'] && !sessionId) {
      sessionId = response.headers['mcp-session-id'];
      console.error(`‚úÖ Session established: ${sessionId}`);
    }

    console.error(`üì• Response status: ${response.status} | Type: ${typeof response.data} | Content: ${JSON.stringify(response.data).substring(0, 200)}...`);

    // 202 Accepted (Îπà ÏùëÎãµ) Ï≤òÎ¶¨
    if (response.status === 202) {
      console.error(`‚ö†Ô∏è 202 Accepted - sending empty JSON response`);
      console.log('{}'); // Îπà JSON Í∞ùÏ≤¥ Ï†ÑÏÜ°
      return;
    }

    // SSE (Server-Sent Events) ÌòïÏãù ÌååÏã±
    let responseData = response.data;
    if (typeof response.data === 'string') {
      // SSE ÌòïÏãùÏù∏ÏßÄ ÌôïÏù∏ (event: message\r\ndata: {...} ÌòïÌÉú)
      if (response.data.includes('event:') && response.data.includes('data:')) {
        try {
          // SSE ÌòïÏãùÏóêÏÑú JSON Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
          const lines = response.data.split('\n');
          for (const line of lines) {
            if (line.trim().startsWith('data:')) {
              const jsonStr = line.substring(line.indexOf('data:') + 5).trim();
              responseData = JSON.parse(jsonStr);
              console.error(`üîÑ SSE format parsed successfully`);
              break;
            }
          }
        } catch (parseError) {
          console.error(`‚ùå Failed to parse SSE format: ${parseError.message}`);
          // SSE ÌååÏã± Ïã§Ìå® Ïãú ÏùºÎ∞ò JSON ÌååÏã± ÏãúÎèÑ
          try {
            responseData = JSON.parse(response.data);
            console.error(`üîÑ Fallback: String response parsed to JSON successfully`);
          } catch (fallbackError) {
            console.error(`‚ùå Failed to parse as JSON: ${fallbackError.message}`);
          }
        }
      } else {
        // ÏùºÎ∞ò JSON Î¨∏ÏûêÏó¥ ÌååÏã± ÏãúÎèÑ
        try {
          responseData = JSON.parse(response.data);
          console.error(`üîÑ String response parsed to JSON successfully`);
        } catch (parseError) {
          console.error(`‚ùå Failed to parse string response as JSON: ${parseError.message}`);
        }
      }
    }

    console.log(JSON.stringify(responseData));
  } catch (error) {
    let requestId = null;
    try {
      if (request && typeof request.id !== 'undefined') {
        requestId = request.id;
      }
    } catch {
      requestId = null;
    }

    const errorResponse = {
      jsonrpc: "2.0",
      error: {
        code: -32603,
        message: error.message
      },
      id: requestId
    };
    console.log(JSON.stringify(errorResponse));
  }
});

// ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å Ïãú ÏÑ∏ÏÖò Ï†ïÎ¶¨
process.on('SIGINT', async () => {
  if (sessionId) {
    try {
      await axios.delete(`${MCP_SERVER_URL}/mcp/`, {
        headers: { 'Mcp-Session-Id': sessionId },
        timeout: 5000
      });
      console.error('‚úÖ Session terminated');
    } catch (error) {
      console.error('‚ö†Ô∏è Failed to terminate session');
    }
  }
  process.exit(0);
});

process.on('SIGTERM', async () => {
  if (sessionId) {
    try {
      await axios.delete(`${MCP_SERVER_URL}/mcp/`, {
        headers: { 'Mcp-Session-Id': sessionId },
        timeout: 5000
      });
      console.error('‚úÖ Session terminated');
    } catch (error) {
      console.error('‚ö†Ô∏è Failed to terminate session');
    }
  }
  process.exit(0);
});